colorFill <- colorVar
for (i in 1:length(colorVar)){
colorRibbon[i] <- paste(colorRibbon[i], "0D", sep = "")
colorFill[i] <- paste(colorFill[i], "4D", sep = "")
}
colorBgHover <- "#F8F8F8"
colorText <- "#525252"
y <- list(title = paste('<b>', varPretty[1,"name"], ' (',varPretty[1,"unity"], ')' , '</b>', sep = ""), color = '#282828',
tickfont = list(family = 'serif'), gridwidth = 2)
x <- list(title = '<b>Date</b>', tickfont = list(family = 'serif'), gridwidth = 2)
title <- list(size = 20, color = '#282828', tickfont = list(family = 'serif'))
# Plot
p <- plotly::plot_ly()
p <- plotly::layout(p, xaxis = x, yaxis = y,
titlefont = title,
margin = list(l = 60, r = 70, t = 70, b =  60))
# Affichage des variables et leur lissage
for (i in 1:(length(nameVar))){
# Lissage non paramétrique par B-spline
# Mise en forme des traces
nameY <- paste('y', i, sep = "")
marker <- NULL
marker$color <- as.character(colorVar[i])
hoverlabel <- list(bgcolor = colorBgHover, font = list(color = colorText), hoveron = "")
hoverlabel$bordercolor <- as.character(colorVar[i])
# Ajout des traces au graphique
if(smoothing == TRUE){
# Création du modèle
if(length(Data$date) > 20){
df = 20
} else {
df <- length(Data$date)-1
}
if(length(nameVar)==1){
yVar <- Data$values
} else {
yVar <- Data$values[,i]
}
varSpline <- gam::gam(yVar~s(Data$date, df = df))
varPred <- stats::predict(varSpline, se.fit = TRUE)
modeleDf <- data.frame(x = Data$date[order(Data$date)] , y = varPred$fit,
lb = as.numeric(varPred$fit - 1.96 * varPred$se.fit),
ub = as.numeric(varPred$fit + 1.96 * varPred$se.fit))
# Affichage de la courbe lissée et son intervalle de confiance
p <- plotly::add_lines(p, x = Data$date, y = varPred$fit, line = list(color = as.character(colorVar[i])), yaxis = nameY,
name = paste(varPretty[i,"acronym"], "(smoothed curve)", sep = " "))
p <- plotly::add_ribbons(p, x = Data$date, ymin = modeleDf$lb, ymax = modeleDf$ub,  yaxis = nameY,
line = list(color = as.character(colorRibbon[i])),
fillcolor = as.character(colorFill[i]),
name = "Standard Error", showlegend = FALSE)
opacity <- 0.19
} else {
opacity <- 1
}
p <- plotly::add_markers(p, x = Data$date, y = yVar, marker = marker, opacity = opacity,name = varPretty[i,"method"], yaxis = nameY, hoverlabel = hoverlabel,
text = ~paste(Data$date, '<br>', varPretty[i,"acronym"], ': <b>', yVar, varPretty[i,"unity"], '</b>'), hoverinfo = 'text')
}
if (length(nameVar) == 1){
p <- plotly::layout(p, title = paste('<b>Tendency of ', varPretty[1,"name"],'</b><br><i>', varPretty[1,"method"],'</i>' , sep = ""))
} else if (i == 2) {
y <- list(title = paste('<b>', varPretty[2,"name"], ' (',varPretty[2,"unity"], ')' , '</b>', sep = ""), color = '#282828', showgrid = FALSE,
gridwidth = 2,  tickfont = list(family = 'serif'), overlaying = "y", side = "right")
p <- plotly::layout(p, yaxis2 = y)
p <- plotly::layout(p, title = "<b>Tendency of environmental variables among time</br>")
} else {
y <- list(title = paste('<b>', varPretty[2,"name"], ' (',varPretty[2,"unity"], ')' , '</b>', sep = ""), color = '#282828', showgrid = FALSE,
gridwidth = 2,  tickfont = list(family = 'serif'), overlaying = "y", side = "right")
p <- plotly::layout(p, yaxis = y)
p <- plotly::layout(p, title = "<b>Tendency of environmental variables among time</br>")
}
p
#htmlwidgets::saveWidget(p, "enviroVarPlot.html", selfcontained = FALSE)
}
##' @title Get Variable's Names from WS2 and formate them
##'
##' @importFrom phisWSClientR initializeClientConnection
##' @importFrom phisWSClientR getEnvironmentData
##'
##' @param token a token from getToken function
##'
##' @return WSResponse
##' @export
##'
##' @examples
##' \donttest{
##' initializeClientConnection(apiID="ws_private", url = "www.opensilex.org/openSilexAPI/rest/")
##'  aToken <- getToken("guest@opensilex.org","guest")
##'  token <- aToken$data
##'  getVarPretty(token = token)
##' }
getVarPretty <- function(token){
phisWSClientR::initializeClientConnection(apiID="ws_private", url = "www.opensilex.org/openSilexAPI/rest/")
rawVar <- phisWSClientR::getVariables2(token = token)
names <- rawVar$data$label
methods <- rawVar$data$label
for (i in 1:length(names)){
names[i] <- strsplit(names[i], split="_")[[1]][1]
methods[i] <- strsplit(methods[i], split="_")[[1]][2]
}
acronyms <- rawVar$data$trait$label
unitVar <- rawVar$data$unit$comment
uriVar <- rawVar$data$uri
varPretty <- data.frame(name = names, method = methods, acronym = acronyms, unity = unitVar, uri = uriVar)
varPretty <- data.frame(lapply(varPretty, as.character), stringsAsFactors=FALSE)
return(varPretty)
}
##' @title Get Data from WS2 and formate them
##'
##' @importFrom phisWSClientR initializeClientConnection
##' @importFrom phisWSClientR getVariables2
##'
##' @param nameVar name of the variable to plot
##' @param methodVar name of the method used to collect data
##' @param varPretty from getVarPretty
##' @param token a token from getToken function
##'
##' @return WSResponse
##' @export
##'
##' @examples
##' \donttest{
##' initializeClientConnection(apiID="ws_private", url = "www.opensilex.org/openSilexAPI/rest/")
##'  aToken <- getToken("guest@opensilex.org","guest")
##'  token <- aToken$data
##'  varPrettyTot <- getVarPretty(token = token)
##'  getDataVarPretty(nameVar = "temperature", varPretty = varPrettyTot, token = token)
##' }
getDataVarPretty <- function(nameVar, methodVar = NULL, varPretty, token) {
phisWSClientR::initializeClientConnection(apiID="ws_private", url = "www.opensilex.org/openSilexAPI/rest/")
if(!is.null(methodVar) && !is.na(methodVar)){
numVar <- 1
while(grepl(methodVar, varPretty$method[numVar]) == FALSE && numVar < dim(varPretty)[1]){
numVar <- numVar+1
}
} else {
numVar <- match(nameVar, varPretty$name)
}
nameUriVar <-  varPretty$uri[numVar]
# Recuperation of the data from the WS
myCount <- phisWSClientR::getEnvironmentData(token = token, variable = nameUriVar)$totalCount
enviroData <- phisWSClientR::getEnvironmentData(token=token, variable =  nameUriVar, verbose = TRUE, pageSize = myCount)$data
nomVar <- paste(toupper(substr(varPretty$name[numVar],1,1)), substr(varPretty$name[numVar],2,nchar(varPretty$name[numVar])), sep = "")
methodVar <- as.character(varPretty$method[numVar])
acronymVar <- as.character(varPretty$acronym[numVar])
unityVar <- as.character(varPretty$unity[numVar])
varPretty <- list(name = nomVar, method = methodVar, acronym = acronymVar, unity = unityVar)
return(list(enviroData = enviroData, varPretty = varPretty))
}
#' Title
#'
#' @param nameVar name of the variables to add in the data frame
#' @param token a token from getToken function
#' @param smoothing logical, smoothing of the data
#'
#' @return data.frame
#' @export
#'
#' @examples
#' \donttest{
#' initializeClientConnection(apiID="ws_private", url = "www.opensilex.org/openSilexAPI/rest/")
#' aToken <- getToken("guest@opensilex.org","guest")
#' token <- aToken$data
#' getDF(token = token, nameVar = list("wind","temperature"))
#' }
getDF <- function(nameVar, token, smoothing = FALSE){
print(nameVar)
phisWSClientR::initializeClientConnection(apiID="ws_private", url = "www.opensilex.org/openSilexAPI/rest/")
varPrettyTot <- getVarPretty(token = token)
varPretty <- NULL
# Chosen variable
for (i in 1: length(nameVar)){
nameString <- toString(nameVar[i])
varMeth <- strsplit(nameString, split="_")
methodVar <- varMeth[[1]][2]
subNameVar <- varMeth[[1]][1]
# Recuperation of the data from the WS
enviroData <- getDataVarPretty(nameVar = subNameVar, methodVar = methodVar, varPretty = varPrettyTot, token = token)
enviroData <- enviroData$enviroData
# Values
yVar <- enviroData$value
if (i == 1){
xVar <- as.POSIXct(enviroData$date, tz = "UTC", format = "%Y-%m-%dT%H:%M:%S")
df <- data.frame(Date = xVar)
}
df[,subNameVar] <-  yVar
if(smoothing == TRUE){
# Création du modèle
print(i)
varSpline <- gam::gam(df[,dim(df)[2]]~s(xVar, df = 20))
varPred <- stats::predict(varSpline, se.fit = TRUE)
distance <- abs(yVar - varPred$fit)
nameDist <- paste("Distance of", subNameVar, "from the curve", sep = " ")
df[,as.character(nameDist)] <- distance
}
}
return(df)
}
a$ki <- "blable"
a <- NULL
plotVar("temperature", token = token, startDate = "2017-06-01", endDate = "2017-06-18")
##' @title Plot Environmental Data
##'
##' @importFrom magrittr %>%
##' @importFrom gam s
##' @importFrom plotly layout
##' @importFrom plotly plot_ly
##' @importFrom plotly add_trace
##'
##' @param nameVar name of the variable to plot
##' @param startDate date from which to plot
##' @param endDate date to which to plot
##' @param sensor sensor's name that recorded the values
##' @param token a token from getToken function
##' @param smoothing logical, smoothing of the data
##'
##' @examples
##' \donttest{
##'  initializeClientConnection(apiID="ws_private", url = "www.opensilex.org/openSilexAPI/rest/")
##'  aToken <- getToken("guest@opensilex.org","guest")
##'  token <- aToken$data
##'  plotVar("temperature", token = token)
##' }
##'
##' @export
##'
plotVar <- function(nameVar, startDate = NULL, endDate = NULL, sensor = NULL, token, smoothing = TRUE){
## Data recuperation
# variable's informations
varPrettyTot <- getVarPretty(token = token)
Data <- NULL
varPretty <- NULL
# Chosen variable
for (i in 1: length(nameVar)){
nameString <- toString(nameVar[i])
varMeth <- strsplit(nameString, split="_")
methodVar <- varMeth[[1]][2]
subNameVar <- varMeth[[1]][1]
# Recuperation of the data from the WS
enviroData <- getDataVarPretty(nameVar = subNameVar, methodVar = methodVar, varPretty = varPrettyTot, token = token)
varPrettyI <- t(data.frame(matrix(unlist(enviroData$varPretty))))
varPretty <- rbind(varPretty, varPrettyI)
enviroData <- enviroData$enviroData
# Values
yVar <- enviroData$value
if (i == 1){
xVar <- as.POSIXct(enviroData$date, tz = "UTC", format = "%Y-%m-%dT%H:%M:%S")
colnames(varPretty) <- c("name", "method", "acronym", "unity")
Data$date <- xVar
}
Data$values <- cbind(Data$values, y = yVar)
}
# Chosen sensor
if(!is.null(sensor)){
sensorsNames <- enviroData$sensorUri
for (i in 1:length(sensorsNames)){
sensorName <- strsplit(sensorsNames[i], split="/")
sensorsNames[i] <- sensorName[[1]][6]
}
Data$sensorsNames <- sensorsNames
if(length(grep(sensor, Data$sensorsNames)) != 0){
Data <- Data[which(Data$sensorsNames == sensor),]
}
}
# Chosen dates
if(!is.null(startDate)){
startDate <- as.POSIXct(startDate, tz = "UTC", format = "%Y-%m-%d")
if(startDate <= max(Data$date)){
if(length(nameVar) == 1){
Data$values <- Data$values[which(Data$date >= startDate)]
} else {
Data$values <- Data$values[which(Data$date >= startDate),]
}
Data$sensorsNames <- Data$sensorsNames[which(Data$date >= startDate)]
Data$date <- Data$date[which(Data$date >= startDate)]
}
}
if (!is.null(endDate)){
endDate <- as.POSIXct(endDate, tz = "UTC", format = "%Y-%m-%d")
if(endDate >= min(Data$date)){
if(length(nameVar) == 1){
Data$values <- Data$values[which(Data$date <= endDate)]
} else {
Data$values <- Data$values[which(Data$date <= endDate),]
}
Data$sensorsNames <- Data$sensorsNames[which(Data$date <= endDate)]
Data$date <- Data$date[which(Data$date <= endDate)]
}
}
## Plotting
# Labels
colorVar <- list("#7CB5EC", "#0F528A", "#003152", "#577A003")
colorRibbon <- colorVar
colorFill <- colorVar
for (i in 1:length(colorVar)){
colorRibbon[i] <- paste(colorRibbon[i], "0D", sep = "")
colorFill[i] <- paste(colorFill[i], "4D", sep = "")
}
colorBgHover <- "#F8F8F8"
colorText <- "#525252"
y <- list(title = paste('<b>', varPretty[1,"name"], ' (',varPretty[1,"unity"], ')' , '</b>', sep = ""), color = '#282828',
tickfont = list(family = 'serif'), gridwidth = 2)
x <- list(title = '<b>Date</b>', tickfont = list(family = 'serif'), gridwidth = 2)
title <- list(size = 20, color = '#282828', tickfont = list(family = 'serif'))
# Plot
p <- plotly::plot_ly()
p <- plotly::layout(p, xaxis = x, yaxis = y,
titlefont = title,
margin = list(l = 60, r = 70, t = 70, b =  60))
# Affichage des variables et leur lissage
for (i in 1:(length(nameVar))){
# Lissage non paramétrique par B-spline
# Mise en forme des traces
nameY <- paste('y', i, sep = "")
marker <- NULL
marker$color <- as.character(colorVar[i])
hoverlabel <- list(bgcolor = colorBgHover, font = list(color = colorText), hoveron = "")
hoverlabel$bordercolor <- as.character(colorVar[i])
# Ajout des traces au graphique
if(smoothing == TRUE){
# Création du modèle
if(length(Data$date) > 20){
df = 20
} else {
df <- length(Data$date)-1
}
if(length(nameVar)==1){
yVar <- Data$values
} else {
yVar <- Data$values[,i]
}
varSpline <- gam::gam(yVar~s(Data$date, df = df))
varPred <- stats::predict(varSpline, se.fit = TRUE)
modeleDf <- data.frame(x = Data$date[order(Data$date)] , y = varPred$fit,
lb = as.numeric(varPred$fit - 1.96 * varPred$se.fit),
ub = as.numeric(varPred$fit + 1.96 * varPred$se.fit))
# Affichage de la courbe lissée et son intervalle de confiance
p <- plotly::add_lines(p, x = Data$date, y = varPred$fit, line = list(color = as.character(colorVar[i])), yaxis = nameY,
name = paste(varPretty[i,"acronym"], "(smoothed curve)", sep = " "))
p <- plotly::add_ribbons(p, x = Data$date, ymin = modeleDf$lb, ymax = modeleDf$ub,  yaxis = nameY,
line = list(color = as.character(colorRibbon[i])),
fillcolor = as.character(colorFill[i]),
name = "Standard Error", showlegend = FALSE)
opacity <- 0.19
} else {
opacity <- 1
}
p <- plotly::add_markers(p, x = Data$date, y = yVar, marker = marker, opacity = opacity,name = varPretty[i,"method"], yaxis = nameY, hoverlabel = hoverlabel,
text = ~paste(Data$date, '<br>', varPretty[i,"acronym"], ': <b>', yVar, varPretty[i,"unity"], '</b>'), hoverinfo = 'text')
}
if (length(nameVar) == 1){
p <- plotly::layout(p, title = paste('<b>Tendency of ', varPretty[1,"name"],'</b><br><i>', varPretty[1,"method"],'</i>' , sep = ""))
} else if (i == 2) {
y <- list(title = paste('<b>', varPretty[2,"name"], ' (',varPretty[2,"unity"], ')' , '</b>', sep = ""), color = '#282828', showgrid = FALSE,
gridwidth = 2,  tickfont = list(family = 'serif'), overlaying = "y", side = "right")
p <- plotly::layout(p, yaxis2 = y)
p <- plotly::layout(p, title = "<b>Tendency of environmental variables among time</br>")
} else {
y <- list(title = paste('<b>', varPretty[2,"name"], ' (',varPretty[2,"unity"], ')' , '</b>', sep = ""), color = '#282828', showgrid = FALSE,
gridwidth = 2,  tickfont = list(family = 'serif'), overlaying = "y", side = "right")
p <- plotly::layout(p, yaxis = y)
p <- plotly::layout(p, title = "<b>Tendency of environmental variables among time</br>")
}
p
#htmlwidgets::saveWidget(p, "enviroVarPlot.html", selfcontained = FALSE)
}
##' @title Get Variable's Names from WS2 and formate them
##'
##' @importFrom phisWSClientR initializeClientConnection
##' @importFrom phisWSClientR getEnvironmentData
##'
##' @param token a token from getToken function
##'
##' @return WSResponse
##' @export
##'
##' @examples
##' \donttest{
##' initializeClientConnection(apiID="ws_private", url = "www.opensilex.org/openSilexAPI/rest/")
##'  aToken <- getToken("guest@opensilex.org","guest")
##'  token <- aToken$data
##'  getVarPretty(token = token)
##' }
getVarPretty <- function(token){
phisWSClientR::initializeClientConnection(apiID="ws_private", url = "www.opensilex.org/openSilexAPI/rest/")
rawVar <- phisWSClientR::getVariables2(token = token)
names <- rawVar$data$label
methods <- rawVar$data$label
for (i in 1:length(names)){
names[i] <- strsplit(names[i], split="_")[[1]][1]
methods[i] <- strsplit(methods[i], split="_")[[1]][2]
}
acronyms <- rawVar$data$trait$label
unitVar <- rawVar$data$unit$comment
uriVar <- rawVar$data$uri
varPretty <- data.frame(name = names, method = methods, acronym = acronyms, unity = unitVar, uri = uriVar)
varPretty <- data.frame(lapply(varPretty, as.character), stringsAsFactors=FALSE)
return(varPretty)
}
##' @title Get Data from WS2 and formate them
##'
##' @importFrom phisWSClientR initializeClientConnection
##' @importFrom phisWSClientR getVariables2
##'
##' @param nameVar name of the variable to plot
##' @param methodVar name of the method used to collect data
##' @param varPretty from getVarPretty
##' @param token a token from getToken function
##'
##' @return WSResponse
##' @export
##'
##' @examples
##' \donttest{
##' initializeClientConnection(apiID="ws_private", url = "www.opensilex.org/openSilexAPI/rest/")
##'  aToken <- getToken("guest@opensilex.org","guest")
##'  token <- aToken$data
##'  varPrettyTot <- getVarPretty(token = token)
##'  getDataVarPretty(nameVar = "temperature", varPretty = varPrettyTot, token = token)
##' }
getDataVarPretty <- function(nameVar, methodVar = NULL, varPretty, token) {
phisWSClientR::initializeClientConnection(apiID="ws_private", url = "www.opensilex.org/openSilexAPI/rest/")
if(!is.null(methodVar) && !is.na(methodVar)){
numVar <- 1
while(grepl(methodVar, varPretty$method[numVar]) == FALSE && numVar < dim(varPretty)[1]){
numVar <- numVar+1
}
} else {
numVar <- match(nameVar, varPretty$name)
}
nameUriVar <-  varPretty$uri[numVar]
# Recuperation of the data from the WS
myCount <- phisWSClientR::getEnvironmentData(token = token, variable = nameUriVar)$totalCount
enviroData <- phisWSClientR::getEnvironmentData(token=token, variable =  nameUriVar, verbose = TRUE, pageSize = myCount)$data
nomVar <- paste(toupper(substr(varPretty$name[numVar],1,1)), substr(varPretty$name[numVar],2,nchar(varPretty$name[numVar])), sep = "")
methodVar <- as.character(varPretty$method[numVar])
acronymVar <- as.character(varPretty$acronym[numVar])
unityVar <- as.character(varPretty$unity[numVar])
varPretty <- list(name = nomVar, method = methodVar, acronym = acronymVar, unity = unityVar)
return(list(enviroData = enviroData, varPretty = varPretty))
}
#' Title
#'
#' @param nameVar name of the variables to add in the data frame
#' @param token a token from getToken function
#' @param smoothing logical, smoothing of the data
#'
#' @return data.frame
#' @export
#'
#' @examples
#' \donttest{
#' initializeClientConnection(apiID="ws_private", url = "www.opensilex.org/openSilexAPI/rest/")
#' aToken <- getToken("guest@opensilex.org","guest")
#' token <- aToken$data
#' getDF(token = token, nameVar = list("wind","temperature"))
#' }
getDF <- function(nameVar, token, smoothing = FALSE){
print(nameVar)
phisWSClientR::initializeClientConnection(apiID="ws_private", url = "www.opensilex.org/openSilexAPI/rest/")
varPrettyTot <- getVarPretty(token = token)
varPretty <- NULL
# Chosen variable
for (i in 1: length(nameVar)){
nameString <- toString(nameVar[i])
varMeth <- strsplit(nameString, split="_")
methodVar <- varMeth[[1]][2]
subNameVar <- varMeth[[1]][1]
# Recuperation of the data from the WS
enviroData <- getDataVarPretty(nameVar = subNameVar, methodVar = methodVar, varPretty = varPrettyTot, token = token)
enviroData <- enviroData$enviroData
# Values
yVar <- enviroData$value
if (i == 1){
xVar <- as.POSIXct(enviroData$date, tz = "UTC", format = "%Y-%m-%dT%H:%M:%S")
df <- data.frame(Date = xVar)
}
df[,subNameVar] <-  yVar
if(smoothing == TRUE){
# Création du modèle
print(i)
varSpline <- gam::gam(df[,dim(df)[2]]~s(xVar, df = 20))
varPred <- stats::predict(varSpline, se.fit = TRUE)
distance <- abs(yVar - varPred$fit)
nameDist <- paste("Distance of", subNameVar, "from the curve", sep = " ")
df[,as.character(nameDist)] <- distance
}
}
return(df)
}
a$ki <- "blable"
a <- NULL
plotVar("temperature", token = token, startDate = "2017-06-01", endDate = "2017-06-18")
a$b <- "bloublou"
a[1]
class(a[1])
a$ki <- list("blable")
a$b <- "bloublou"
a[1]
class(a[1])
varPrettyTot <- getVarPretty(token = token)
varPrettyTot
varPrettyTot$name
plotVar("humidity", token = token, sensor = "s1008")
varPrettyTot$name
phisWSClientR::initializeClientConnection(apiID="ws_private", url = "www.opensilex.org/openSilexAPI/rest/")
varPretty <- getVarPretty(token = token)
listVar <- NULL
for (i in 1:8){
listVar$name[i] <-  paste(toupper(substr(varPretty$name[i],1,1)), substr(varPretty$name[i],2,nchar(varPretty$name[i])), " (", varPretty$method[i], ")", sep = "")
listVar$value[i] <- paste(varPretty$name[i], "_", varPretty$method[i], sep = "")
}
listVar
